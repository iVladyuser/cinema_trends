{"version":3,"file":"static/js/764.a4fd8012.chunk.js","mappings":"iOAoEA,UAxDe,WACb,IAAAA,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAA/BG,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAA8BJ,EAAAA,EAAAA,WAAS,GAAMK,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAEpBG,EAAcX,EAAaY,IAAI,UAIrCC,EAAAA,EAAAA,YAAU,WACHF,IAEDN,EAAMS,OAAS,IAGnBJ,GAAW,IACXK,EAAAA,EAAAA,IAlBa,gBAkBcJ,GACxBK,MAAK,SAAAC,GACJX,EAASW,EAAKC,QAChB,IACCC,MAAMC,EAAAA,GACNC,SAAQ,kBAAMX,GAAW,EAAM,KACpC,GAAG,CAACL,EAAOM,IAoBX,OACEW,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CAACC,kBApBW,SAAAC,GACxB,IAAMC,EAAcD,EAAME,OAAOC,cAAcC,MAAM,KAAKC,KAAK,KAE/D,GAAoB,KAAhBJ,EAIF,OAHA5B,EAAgB,CAAC,GACjBK,EAAS,SACT4B,EAAAA,OAAAA,KAAY,8BAA+BC,EAAAA,GAIzCN,IAAgBlB,GAIpBV,EAAgB,CAAEmC,MAAOP,IACzBvB,EAAS,KAJP4B,EAAAA,OAAAA,KAAY,6BAA8BC,EAAAA,EAK9C,EAIqDP,MAAOjB,KAIxDW,EAAAA,EAAAA,MAACe,EAAAA,GAAY,CAAAb,SAAA,CACVf,IAAWgB,EAAAA,EAAAA,KAACa,EAAAA,GAAM,KACnBb,EAAAA,EAAAA,KAACc,EAAAA,GAAU,CAAClC,MAAOA,SAI3B,C","sources":["pages/Movies.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader, MoviesList, SearchBar } from '../components';\nimport { Notify } from 'notiflix';\nimport { fetchSearchMovie } from '../services/api';\nimport { onFetchError, paramsForNotify } from 'services/showError';\nimport { SectionStyle } from './Pages.styled';\n\n// import { useSearchParams, useState, useLocation, Link } from 'react-router-dom';\n\nconst endPoint = '/search/movie';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [films, setFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const searchQuery = searchParams.get('query');\n\n  // const location = useLocation();\n\n  useEffect(() => {\n    if (!searchQuery) return;\n\n    if (films.length > 0) {\n      return;\n    }\n    setLoading(true);\n    fetchSearchMovie(endPoint, searchQuery)\n      .then(data => {\n        setFilms(data.results);\n      })\n      .catch(onFetchError)\n      .finally(() => setLoading(false));\n  }, [films, searchQuery]);\n\n  const onSubmitSearchBar = value => {\n    const searchValue = value.trim().toLowerCase().split(' ').join('+');\n\n    if (searchValue === '') {\n      setSearchParams({});\n      setFilms([]);\n      Notify.info('Enter your request, please!', paramsForNotify);\n      return;\n    }\n\n    if (searchValue === searchQuery) {\n      Notify.info('Enter new request, please!', paramsForNotify);\n      return;\n    }\n    setSearchParams({ query: searchValue });\n    setFilms([]);\n  };\n\n  return (\n    <>\n      <SearchBar onSubmitSearchBar={onSubmitSearchBar} value={searchQuery} />\n      {/* <Link state={{ from: location }} \n      //key={} to={``} \n      /> */}\n      <SectionStyle>\n        {loading && <Loader />}\n        <MoviesList films={films} />\n      </SectionStyle>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_useState","useState","_useState2","films","setFilms","_useState3","_useState4","loading","setLoading","searchQuery","get","useEffect","length","fetchSearchMovie","then","data","results","catch","onFetchError","finally","_jsxs","_Fragment","children","_jsx","SearchBar","onSubmitSearchBar","value","searchValue","trim","toLowerCase","split","join","Notify","paramsForNotify","query","SectionStyle","Loader","MoviesList"],"sourceRoot":""}